name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  version:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      changelog: ${{ steps.version.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version and create tag
        id: version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: patch
          custom_release_rules: |
            feat:minor:‚ú® Features
            fix:patch:üêõ Bug Fixes
            docs:patch:üìö Documentation
            style:patch:üíé Styles
            refactor:patch:üì¶ Code Refactoring
            perf:patch:üöÄ Performance Improvements
            test:patch:üö® Tests
            build:patch:üõ† Build System
            ci:patch:‚öôÔ∏è CI Configuration
            chore:patch:‚ôªÔ∏è Chores
            revert:patch:üóë Reverts
            breaking:major:üí• Breaking Changes

      - name: Update package.json versions
        run: |
          npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version
          cd backend && npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version
          cd ../frontend && npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version

      - name: Commit version updates
        run: |
          git add package.json backend/package.json frontend/package.json
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}" || exit 0
          git push origin main

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Lint backend
        run: cd backend && npm run lint || echo "No lint script found"

      - name: Lint frontend
        run: cd frontend && npm run lint || echo "No lint script found"

      - name: Test backend
        run: cd backend && npm test || echo "No test script found"
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/icebreaker_test

      - name: Test frontend
        run: cd frontend && npm test -- --coverage --watchAll=false || echo "No test script found"

  build-and-push:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  release:
    needs: [version, build-and-push]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.version.outputs.new_version }}
          name: Release ${{ needs.version.outputs.new_version }}
          body: |
            ## üöÄ Release ${{ needs.version.outputs.new_version }}
            
            ### Docker Images
            - Backend: `ghcr.io/${{ github.repository }}/backend:${{ needs.version.outputs.new_version }}`
            - Frontend: `ghcr.io/${{ github.repository }}/frontend:${{ needs.version.outputs.new_version }}`
            
            ### Changes
            ${{ needs.version.outputs.changelog }}
            
            ### Quick Start
            ```bash
            # Using Docker Compose
            git clone https://github.com/${{ github.repository }}.git
            cd ice-breaker-app
            docker-compose up -d
            ```
            
            ### Access
            - Application: http://localhost:3000
            - Admin Panel: http://localhost:3000/admin
            - API Health: http://localhost:5000/health
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: [version, build-and-push]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Production
        run: |
          echo "üöÄ Deploying version ${{ needs.version.outputs.new_version }} to production"
          echo "Backend Image: ghcr.io/${{ github.repository }}/backend:${{ needs.version.outputs.new_version }}"
          echo "Frontend Image: ghcr.io/${{ github.repository }}/frontend:${{ needs.version.outputs.new_version }}"
          # Add your deployment commands here
          # For example, updating Kubernetes deployments, Docker Swarm services, etc. 