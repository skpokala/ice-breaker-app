name: Build and Push Docker Images

on:
  push:
    branches: [ main, master, ghcr-test ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual triggers

env:
  REGISTRY: ghcr.io
  DOCKER_HUB_USERNAME: skpokala
  IMAGE_NAME: ice-breaker-app

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: read
      packages: write
      id-token: write
      actions: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Free up disk space
      run: |
        df -h
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        df -h

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Set image names and tags
      run: |
        echo "REPO_LOWER=${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        else
          echo "VERSION=${GITHUB_SHA::8}" >> $GITHUB_ENV
        fi

    - name: Debug information
      run: |
        echo "Repository: ${{ github.repository }}"
        echo "Lowercase repo: ${{ env.REPO_LOWER }}"
        echo "Version: ${{ env.VERSION }}"
        echo "Event: ${{ github.event_name }}"
        echo "Ref: ${{ github.ref }}"
        echo "Actor: ${{ github.actor }}"

    # Skip push for pull requests - just build to test
    - name: Build only for PRs - Backend
      if: github.event_name == 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        platforms: linux/amd64
        tags: backend:pr-${{ github.event.number }}
        cache-from: type=gha

    - name: Build only for PRs - Frontend  
      if: github.event_name == 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        platforms: linux/amd64
        tags: frontend:pr-${{ github.event.number }}
        cache-from: type=gha

    # For pushes, try GHCR first, then fallback to Docker Hub
    - name: Try GHCR - Login and Build Backend
      if: github.event_name != 'pull_request'
      continue-on-error: true
      id: ghcr-attempt
      run: |
        echo "Attempting GHCR login and build..."
        
        # Login to GHCR
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        
        # Build and push backend
        docker buildx build \
          --platform linux/amd64 \
          --push \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          --tag ghcr.io/${{ env.REPO_LOWER }}/backend:latest \
          --tag ghcr.io/${{ env.REPO_LOWER }}/backend:${{ env.VERSION }} \
          ./backend
          
        # Build and push frontend
        docker buildx build \
          --platform linux/amd64 \
          --push \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          --tag ghcr.io/${{ env.REPO_LOWER }}/frontend:latest \
          --tag ghcr.io/${{ env.REPO_LOWER }}/frontend:${{ env.VERSION }} \
          ./frontend
          
        echo "GHCR_SUCCESS=true" >> $GITHUB_ENV
        echo "‚úÖ GHCR deployment successful!"

    - name: Fallback to Docker Hub
      if: github.event_name != 'pull_request' && steps.ghcr-attempt.outcome == 'failure'
      run: |
        echo "GHCR failed, attempting Docker Hub fallback..."
        
        # Check if Docker Hub token is available
        if [ -z "${{ secrets.DOCKER_HUB_TOKEN }}" ]; then
          echo "‚ùå Docker Hub token not found!"
          echo "Please add DOCKER_HUB_TOKEN secret to your repository:"
          echo "1. Go to https://hub.docker.com/settings/security"
          echo "2. Generate a new token"
          echo "3. Add it as DOCKER_HUB_TOKEN in GitHub repository secrets"
          exit 1
        fi
        
        # Login to Docker Hub
        echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ env.DOCKER_HUB_USERNAME }} --password-stdin
        
        # Build and push backend to Docker Hub
        docker buildx build \
          --platform linux/amd64 \
          --push \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          --tag ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}-backend:latest \
          --tag ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}-backend:${{ env.VERSION }} \
          ./backend
          
        # Build and push frontend to Docker Hub
        docker buildx build \
          --platform linux/amd64 \
          --push \
          --cache-from type=gha \
          --cache-to type=gha,mode=max \
          --tag ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}-frontend:latest \
          --tag ${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}-frontend:${{ env.VERSION }} \
          ./frontend
          
        echo "DOCKER_HUB_SUCCESS=true" >> $GITHUB_ENV
        echo "‚úÖ Docker Hub deployment successful!"

    - name: Generate deployment summary
      if: github.event_name != 'pull_request'
      run: |
        echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ env.GHCR_SUCCESS }}" = "true" ]; then
          echo "### ‚úÖ GHCR Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "Images published to GitHub Container Registry:" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ env.REPO_LOWER }}/backend:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ env.REPO_LOWER }}/backend:${{ env.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ env.REPO_LOWER }}/frontend:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`ghcr.io/${{ env.REPO_LOWER }}/frontend:${{ env.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üì¶ [View Packages](https://github.com/${{ github.repository }}/pkgs)" >> $GITHUB_STEP_SUMMARY
          
        elif [ "${{ env.DOCKER_HUB_SUCCESS }}" = "true" ]; then
          echo "### ‚ö†Ô∏è Docker Hub Fallback Used" >> $GITHUB_STEP_SUMMARY
          echo "GHCR failed, images published to Docker Hub:" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}-backend:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}-backend:${{ env.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}-frontend:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.DOCKER_HUB_USERNAME }}/${{ env.IMAGE_NAME }}-frontend:${{ env.VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üì¶ [View on Docker Hub](https://hub.docker.com/u/${{ env.DOCKER_HUB_USERNAME }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîß To fix GHCR:" >> $GITHUB_STEP_SUMMARY
          echo "1. Enable Packages in [repository settings](https://github.com/${{ github.repository }}/settings)" >> $GITHUB_STEP_SUMMARY
          echo "2. Set Actions permissions to 'Read and write' in [Actions settings](https://github.com/${{ github.repository }}/settings/actions)" >> $GITHUB_STEP_SUMMARY
          
        else
          echo "### ‚ùå Both GHCR and Docker Hub Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Action Required:** Set up Docker Hub token" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to https://hub.docker.com/settings/security" >> $GITHUB_STEP_SUMMARY
          echo "2. Create a new access token named 'GitHub Actions'" >> $GITHUB_STEP_SUMMARY
          echo "3. Add it as \`DOCKER_HUB_TOKEN\` in [repository secrets](https://github.com/${{ github.repository }}/settings/secrets/actions)" >> $GITHUB_STEP_SUMMARY
          echo "4. Re-run this workflow" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Build Details:**" >> $GITHUB_STEP_SUMMARY
        echo "- Version: ${{ env.VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- Commit: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- Event: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY

    - name: Fail if no deployment succeeded
      if: github.event_name != 'pull_request' && env.GHCR_SUCCESS != 'true' && env.DOCKER_HUB_SUCCESS != 'true'
      run: |
        echo "‚ùå Both GHCR and Docker Hub deployments failed"
        echo "Check the logs above for details"
        exit 1 